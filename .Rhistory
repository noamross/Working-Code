plot(x,y)
y = dnbinom(1:100,prob=0.5,size=20)
plot(x,y)
#ECL 298 HW Week 6: Fitting Negative Binomial#
#Noam Ross, February 11, 2011#
#
fitdiscdist <- function(data, distpick, guesspars) {#
# This function fits a discrete probability distribution to a distribution of #
# data, using a maximum-likelihood method.#
# Arguments:#
#   data: a vector of integers representing the data to be fit#
#   distpick: the distribution to use to fit, e.g. dpois, dnbinom#
#   guesspars: a set of initial guesses for the distribution parameters, in the form#
#     of a vector with names#
  optim.out = optim(guesspars, negloglike, method="BFGS",data=data, distpick=distpick) #run optimize function on negloglike function,#
  AIC = 2*length(guesspars) + 2*optim.out$value #calculate information criterion#
  out = list(pars=optim.out$par, likelihood=(-optim.out$value), AIC=AIC) #package outputs as list#
  return(out) #output the list#
}#
#
negloglike <- function(pars, data, distpick) {#
# This function calculates the negative log likelihood of data under a given function and parameters#
# Arguments:#
#   data: a vector of integers representing the data to be fit#
#   distpick: the distribution to use to fit, e.g. dpois, dnbinom#
#   pars: a set of initial guesses for the distribution parameters, in the form#
#     of a list with names#
  callparms = c(list(x=data,log=TRUE), as.list(pars))  #create a unified list of arguments#
  loglikelihoods = do.call(distpick, callparms) #call the distribution function with those arguments#
  out = -sum(loglikelihoods)   #sum the loglikelihoods#
  return(out) #output the optimizing value#
#
}#
#
#Work session to fit data#
data=c(33,rep(0,25),rep(1,3),rep(2,2),rep(2,3),8,10,rep(0,19),12) #create the data to fit#
nbprobguess = 1-(mean(data)/var(data)) # set initial guess for probability for neg-binomfit#
nbsizeguess = mean(data)*(1-nbprobguess)/nbprobguess #set initial guess for size for neg-binomfit#
nbiguess = c(prob=nbprobguess, size=nbsizeguess) #list of initial guesses for fit of neg-binomial distribution.  These are calulated #
#
nbinomrun = fitdiscdist(data,dnbinom,nbiguess) #fit the data to a negative binomial distribution#
poisrun = fitdiscdist(data,dpois,mean(data)) #fit the data to a poisson distribution#
#
hist(data,n=24,col="red",freq=FALSE, main="Poisson and Negative Binomial Fits to SARS Data",#
     xlab="Number of Infections",ylab="Proportion of Cases")#
pys = dpois(0:33,lambda=poisrun$par)#
dnys = dnbinom(0:33,size=nbinomrun$par['size'],prob=nbinomrun$par['prob'])#
xs = 0:33#
lines(xs,pys,col="green",lwd=2)#
lines(xs,dnys,col="blue",lwd=2)#
legend(15,0.6,c(paste("Poisson (AIC = ",round(poisrun$AIC,2),")"),#
       paste("Neg-Binom (AIC = ",round(nbinomrun$AIC,2),")")), col=c("green","blue"), #
       lty=c(1,1))#
       #
       dnbinom
#ECL 298 HW Week 6: Fitting Negative Binomial#
#Noam Ross, February 11, 2011#
#
fitdiscdist <- function(data, distpick, guesspars) {#
# This function fits a discrete probability distribution to a distribution of #
# data, using a maximum-likelihood method.#
# Arguments:#
#   data: a vector of integers representing the data to be fit#
#   distpick: the distribution to use to fit, e.g. dpois, dnbinom#
#   guesspars: a set of initial guesses for the distribution parameters, in the form#
#     of a vector with names#
  optim.out = optim(guesspars, negloglike, method="BFGS",data=data, distpick=distpick) #run optimize function on negloglike function,#
  AIC = 2*length(guesspars) + 2*optim.out$value #calculate information criterion#
  out = list(pars=optim.out$par, likelihood=(-optim.out$value), AIC=AIC) #package outputs as list#
  return(out) #output the list#
}#
#
negloglike <- function(pars, data, distpick) {#
# This function calculates the negative log likelihood of data under a given function and parameters#
# Arguments:#
#   data: a vector of integers representing the data to be fit#
#   distpick: the distribution to use to fit, e.g. dpois, dnbinom#
#   pars: a set of initial guesses for the distribution parameters, in the form#
#     of a list with names#
  callparms = c(list(x=data,log=TRUE), as.list(pars))  #create a unified list of arguments#
  loglikelihoods = do.call(distpick, callparms) #call the distribution function with those arguments#
  out = -sum(loglikelihoods)   #sum the loglikelihoods#
  return(out) #output the optimizing value#
#
}#
#
#Work session to fit data#
data=c(33,rep(0,25),rep(1,3),rep(2,2),rep(2,3),8,10,rep(0,19),12) #create the data to fit#
nbprobguess = 1-(mean(data)/var(data)) # set initial guess for probability for neg-binomfit#
nbsizeguess = mean(data)*(1-nbprobguess)/nbprobguess #set initial guess for size for neg-binomfit#
nbiguess = c(prob=nbprobguess, size=nbsizeguess) #list of initial guesses for fit of neg-binomial distribution.  These are calulated #
#
nbinomrun = fitdiscdist(data,dnbinom,nbiguess) #fit the data to a negative binomial distribution#
poisrun = fitdiscdist(data,dpois,mean(data)) #fit the data to a poisson distribution#
#
#Plot data#
hist(data,n=24,col="red",freq=FALSE, main="Poisson and Negative Binomial Fits to SARS Data",#
     xlab="Number of Infections",ylab="Proportion of Cases")#
pys = dpois(0:33,lambda=poisrun$par)#
dnys = dnbinom(0:33,size=nbinomrun$par['size'],prob=nbinomrun$par['prob'])#
xs = 0:33#
lines(xs,pys,col="green",lwd=2)#
lines(xs,dnys,col="blue",lwd=2)#
legend(15,0.6,c(paste("Poisson (AIC = ",round(poisrun$AIC,2),")"),#
       paste("Neg-Binom (AIC = ",round(nbinomrun$AIC,2),")")), col=c("green","blue"), #
       lty=c(1,1))
#ECL 298-026 Class Session February 15, 2011 #
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44) #
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 )#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t)#
#
hist(js)
hist(as)
hist(f)
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44) #
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 )#
#
##
lambda = as * js*f/2 #create demographic multiplier
lambda
lambda = as + js*f/2 #create demographic multiplier
lambda
lambda(-1)
lambda[-1]
lambda[-9]
corr(lambda[-1], lambda[-9])
cor(lambda[-1], lambda[-9])
acf(lambda)
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 1 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = N0 #set inital conditions of all runs to N0
N
for(i in 1:tf+1) {#
  N[i+1] = sample(lambda, reps, replace=TRUE)*N[i]#
}
for(i in 1:tf+1) {#
  N[i+1] = sample(lambda, runs, replace=TRUE)*N[i]#
}
warning()
N
sample(lambda, runs, replace=TRUE)
N[1]
N[1,]
for(i in 1:tf+1) {#
  N[i+1,] = sample(lambda, runs, replace=TRUE)*N[i,]#
}
for(i in 2:tf) {#
  N[i-1,] = sample(lambda, runs, replace=TRUE)*N[i,]#
}
N
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 1 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = N0 #set inital conditions of all runs to N0
N0
size(N)
dim(N)
nrow(N)
N = matrix(0, runs, tf) #create data space
nrow(N)
ncol(N)
#parameters#
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 1 #set initial population level#
#
#set up simulation#
N = matrix(0, runs, tf) #create data space#
N[1,] = N0 #set inital conditions of all runs to N0
for(i in 2:tf) {#
  N[i-1,] = sample(lambda, runs, replace=TRUE)*N[i,]#
}
N[1-
N[1]
n[1,]
N[1,]
n[,1]
N[,1]
tf = 100 #set number of time steps#
runs = 50 #set number of repeats#
N0 = 1 #set initial population level#
#
#set up simulation#
N = matrix(0, runs, tf) #create data space#
N[1,] = N0 #set inital conditions of all runs to N0
N
#parameters#
tf = 100 #set number of time steps#
runs = 50 #set number of repeats#
N0 = 1 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = N0 #set inital conditions of all runs to N0
N
for(i in 2:tf) {#
  N[i-1,] = sample(lambda, runs, replace=TRUE)*N[i,]#
}
N
sample(lambda, runs, replace=TRUE)
for(i in 2:tf) {#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}
N
N[1,]
length(N[1,])
 sample(lambda, runs, replace=TRUE)
N[1,] = rep(N0,runs)
N[1,]
tf = 100 #set number of time steps#
runs = 50 #set number of repeats#
N0 = 100 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0
N
for(i in 2:tf) {#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}
N
matplot(N)
hist(N[tf,])  #create histogram of final values
#parameters#
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 100 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}#
#
hist(log(N[tf,]))  #create histogram of final values
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))
lines(gaussxs,gaussys)
gaussxs
gaussys
hist(log(N[tf,], freq=TRUE))
hist(log(N[tf,], freq=FALSE))  #create histogram of final values
hist(log(N[tf,], freq=FALSE))
hist(log(N[tf,]), freq=FALSE)  #create histogram of final values
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys)
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs") #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"))
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 50000 #set number of repeats#
N0 = 100 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve.  include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 100 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve.  include density dependence.
matplot(N)
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 100 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve.  include density dependence.
matplot(log(N))
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20)
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 100 #set initial population level#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")
legend("topleft",c("Measured", "Calculated", col=c("blue","green")))
legend("topleft",c("Measured", "Calculated"), col=c("blue","green"))
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), col=c("blue","green"))
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 5000 #set number of repeats#
N0 = 10 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 10 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
matplot(N)
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 10 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
par(mfrow=c(1,2))#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 100 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
par(mfrow=c(1,2))#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
matplot(N,type="l")#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 200 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
par(mfrow=c(1,2))#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs"), breaks=20) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
matplot(N,type="l")#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 200 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
par(mfrow=c(1,2))#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
matplot(N,type="l")#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
#cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
#acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 200 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
par(mfrow=c(1,2))#
hist(log(N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
matplot(N,type="l")#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.
log(N[tf,]
)
#ECL 298-026 Class Session February 15, 2011 #
#
#demographic stochasticity in acorn woodepeckers#
#
#N(t) - number of female adults in year (t)#
#N(t+1) = N(t)*as(t+1) + f(t+1)*js(t+1)*(0.5)*N(t) = (as(t+1) + js(t+1)*f(t+1)*0.5)*N(t)#
#
#Data from Sebastian (stacey and tapper)#
as=c(0.53,0.68,0.71,0.38,0.54,0.69,0.66,0.49,0.61)  #annual adult surviorship (female)#
js=c(0.56, 0.64, 0.30, 0.40,0, 0.38, 0.18, 0.25, 0.44)  #annual juvenile surviorship#
f=c(3.38 ,1.27 ,2.77 ,2.17 ,0.05 ,4.00 ,2.37 ,0.50 ,1.60 ) #annual fecundity (male and female)#
#
#Examine correlation structure#
lambda = as + js*f/2 #create demographic multiplier#
#cor(lambda[-1], lambda[-9]) #calculate correlation coefficent of lambda[t] against lambda[t+1]#
#acf(lambda) #shows autocorrelation by different lag times#
#
#parameters#
tf = 300 #set number of time steps#
runs = 500 #set number of repeats#
N0 = 26 #set initial population level#
nestingsites = 26 #max number of nexting pairs#
exthreshold = 1 #quasi-extinction threshold#
#
#set up simulation#
N = matrix(0, tf, runs) #create data space#
N[1,] = rep(N0,runs) #set inital conditions of all runs to N0#
#
for(i in 2:tf) {  #run simulation#
  temp = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites)#
  temp[which(temp<exthreshold)] = 0#
  N[i,] = temp#
# N[i,] = pmin(sample(lambda, runs, replace=TRUE)*N[i-1,], nestingsites) #adds ceiling to population#
# N[i,] = sample(lambda, runs, replace=TRUE)*N[i-1,]#
 #
}#
par(mfrow=c(1,2))#
hist((N[tf,]), freq=FALSE, col="red", xlab="Log of Final Population",   #create histogram of final values#
     ylab="Frequency", main=paste("Final Populations from ",runs," runs")) #
gaussxs = seq(min(log(N[tf,])), max(log(N[tf,])), length.out=100)  #calculate gaussian from output data#
gaussys = dnorm(gaussxs, mean(log(N[tf,])), sd(log(N[tf,])))#
lines(gaussxs,gaussys, col="blue")#
legend("topleft",c("Measured", "Calculated"), lty=c(1,1), col=c("blue","green"))#
matplot(N,type="l")#
#Assignment - implement code, plot histogram of log(N[tf,])#
#Superimpose appropriate gaussian curve (from log of lambda, see reading).  #
#include density dependence.#
#Plot histogram of extinction times. Might use sign(), or rowsums()
log([tf,])
N[tf,]
#
SPCmod <- function(t, x, parms) {#
  with(as.list(c(parms, x)), {#
    import <- sigimp(t)#
    dS <- import - b*S*P + g*C     #substrate#
    dP <- c*S*P  - d*C*P           #producer#
    dC <- e*P*C  - f*C             #consumer#
    res <- c(dS, dP, dC)#
    list(res)#
  })#
}#
#
## Parameters #
parms  <- c(b = 0.0, c = 0.1, d = 0.1, e = 0.1, f = 0.1, g = 0.0)#
#
## vector of timesteps#
times  <- seq(0, 100, length = 101)#
#
## external signal with rectangle impulse#
signal <- as.data.frame(list(times = times,#
                            import = rep(0,length(times))))#
#
signal$import[signal$times >= 10 & signal$times <= 11] <- 0.2#
#
sigimp <- approxfun(signal$times, signal$import, rule = 2)#
#
#
## Start values for steady state#
y <- xstart <- c(S = 1, P = 1, C = 1)#
#
## Solving#
out <- as.data.frame(lsoda(xstart, times, SPCmod, parms))#
#
## Plotting#
mf <- par(mfrow = c(2,2))#
plot(out$time, out$S,  type = "l", ylab = "substrate")#
plot(out$time, out$P, type = "l", ylab = "producer")#
plot(out$time, out$C, type = "l", ylab = "consumer")#
plot(out$P, out$C, type = "l", xlab = "producer", ylab = "consumer")#
par(mfrow = mf)
require(deSolve)
#
SPCmod <- function(t, x, parms) {#
  with(as.list(c(parms, x)), {#
    import <- sigimp(t)#
    dS <- import - b*S*P + g*C     #substrate#
    dP <- c*S*P  - d*C*P           #producer#
    dC <- e*P*C  - f*C             #consumer#
    res <- c(dS, dP, dC)#
    list(res)#
  })#
}#
#
## Parameters #
parms  <- c(b = 0.0, c = 0.1, d = 0.1, e = 0.1, f = 0.1, g = 0.0)#
#
## vector of timesteps#
times  <- seq(0, 100, length = 101)#
#
## external signal with rectangle impulse#
signal <- as.data.frame(list(times = times,#
                            import = rep(0,length(times))))#
#
signal$import[signal$times >= 10 & signal$times <= 11] <- 0.2#
#
sigimp <- approxfun(signal$times, signal$import, rule = 2)#
#
#
## Start values for steady state#
y <- xstart <- c(S = 1, P = 1, C = 1)#
#
## Solving#
out <- as.data.frame(lsoda(xstart, times, SPCmod, parms))#
#
## Plotting#
mf <- par(mfrow = c(2,2))#
plot(out$time, out$S,  type = "l", ylab = "substrate")#
plot(out$time, out$P, type = "l", ylab = "producer")#
plot(out$time, out$C, type = "l", ylab = "consumer")#
plot(out$P, out$C, type = "l", xlab = "producer", ylab = "consumer")#
par(mfrow = mf)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1, #xylem conductance, mmol s-1 MPa-1 #
)#
  soil water potential )#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1,#stomatal closure factor#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(as.list(parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  These are at#
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
lsoda(states0, times, tree_odes, parms)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1, #xylem conductance, mmol s-1 MPa-1 #
)#
  soil water potential )#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1,#stomatal closure factor#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(as.list(parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  These are at#
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1, #xylem conductance, mmol s-1 MPa-1 #
)
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)
states)
states0
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1,#stomatal closure factor#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(as.list(parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  These are at#
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1#stomatal closure factor#
)
parms
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1#stomatal closure factor#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(as.list(parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  These are at#
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
states0
W
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  X = 1#
  G = 1#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1#stomatal closure factor#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(as.list(parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  These are at#
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
states0
tree_odes(0,states0,parms)
states0
parms
as.list(parms)
as.list(states0,parms)
list(as.list(states0), parms)
list(states0)
as.list(states0)
c(as.list(states0), parms)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  X = 1, #xylem pressure, MPa#
  G = 1, #Stomatal opening#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1#stomatal closure factor#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  X = 1, #xylem pressure, MPa#
  G = 1, #Stomatal opening#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1#stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
parms
)
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1#stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  X = 1, #xylem pressure, MPa#
  G = 1, #Stomatal opening#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * s * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  X = 1, #xylem pressure, MPa#
  G = 1, #Stomatal opening#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductane, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 1, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function#
  k.K = 1, #shape paramter for conductance weibull function#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M))) #
  })#
}#
#
require(deSolve)#
lsoda(states0, times, tree_odes, parms)
modelout = lsoda(states0, times, tree_odes, parms)
modelout$W
modelout[W]
modelout[,W]
modelout[W,]
names(modelout(W))
modelout
dimnames(modelout)
plot(modelout[,1], modelout[,4])
plot(modelout[,1], modelout[,4], type="l")
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
#plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
#plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:120 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
#plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-(-X/l.K)^k.K) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
#plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = (k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 10, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 100, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 40, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 20, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 5, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 5, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 5, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 5, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998#
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 5, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 0.2, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 0.2, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 5, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:200 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 0.2, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 0.2, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 0.2, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 4, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 1, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
modelout
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 3, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 1, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 7, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 2, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.01  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.02  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0.1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.02  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0.1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.02  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0.1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.02  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.02  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = -.02  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = .1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 2, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 1.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 3,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 0.5,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.3, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * exp(-(-X)/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax * (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1.5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 2, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 0, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = 1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.01, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 10 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 10, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
plot(times, (1-modelout[,"K"]/parms$kmax))
plot(times, S*(1-modelout[,"K"]/parms$kmax))
plot(times, modelout[,"S"]*(1-modelout[,"K"]/parms$kmax))
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = 0, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = 0, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.001, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = 0, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.01, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = 0, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = 0, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .1, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.01, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.01, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .001, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.01, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .0001, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.01, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 5, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .0001, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .0001, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .0001, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .0001, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m                               #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.5, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.001, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.01, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -2, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -2, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - log(K/kmax))         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1.5, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1.5, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 3, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
#Functions and Code for Tree Death Physiology Model#
#Noam Ross Started February 15, 2011#
#
#Set run variables#
times = 1:500 #times at which to solve the model#
states0 = c( #a vector of initial state variables#
  W = -1.5, #soil water potential, MPa#
  D = -2, #leaf surface moisture saturation deficit, MPa#
  S = 5, #total non-structural carbohydrates, g#
  K = 1 #xylem conductance, mmol s-1 MPa-1 #
)#
#
#
parms = list(#
  alpha = 1, #photsynthetic rate per stomatal conductance, in g s MPa mmol-1 d-1#
  beta = .01, #repair coefficient in g g-1 d-1#
  gamma = 0, #growth coefficient in g g-1 d-1#
  theta = 0.1, #repair efficacy, in mmol s-1 MPa-1 d-1 g-1#
  kmax = 1, #maximum hydraulic contuctance, in mmol s-1 MPa-1#
  m = 0.1, #minimum maintenance respiration carb allocation, in g d-1#
  l.B = 1, #scale parameter for growth weibull function#
  k.B = 1, #shape parameter for growth weibull function#
  l.K = 8, #scale parameter for conductance weibull function, from Pinyon branches in Linton eet al. 1998#
  k.K = 2, #shape paramter for conductance weibull function, from Pinyon branches in Linton et al. 1998 #
  #Gmin = 0 , #minimum stomatal conductance, mmol s-1 MPa-1#
  gmax = 1,  #maximum stomatal conductance, mmol s-1 MPa-1#
  #l.G = 1 , #scale parameter for stomatal closing weibull function#
  #k.G = 5 , #shape parameter for stomatal closing weibull function#
  gs = 0.5, #stomatal closure factor#
  wpg = 0.5 #water potential of gravity, MPa#
)#
  #
#
tree_odes = function(time, states, parms) {#
#A function of the ODEs for the tree model, designed to be solved by lsoda#
#Vars:#
# time:   current time state of the model#
# states: a vector of state variables#
# parms:  a list of parameters for the model#
  #
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    X = (W - D*gmax/K - wpg)/(1 + D/(K*gs)) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    G = gmax - (-X/gs) # Calculate stomatal flow#
    #
    #
    dW = 0  #no change in soil water potential or #
    dD = 0  #atmospheric water deficit for now#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth#
    M = m*S                              #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dW,dD,dS,dK),c(X=X, G=G, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })#
}#
#
require(deSolve)#
modelout = lsoda(states0, times, tree_odes, parms)#
save(times, states0, parms, modelout,     #save parameters and output data in ASCII file named "Modelrun_YYYYMMDD_HHMM.R"#
     file=paste("Outputs/Modelrun_" ,format(Sys.time(), "%Y%m%d_%H%M"), ".R", sep=""), #
     ascii=TRUE)#
#
pdf(paste(file="Outputs/Modelrun_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".pdf", sep=""))#create a pdf file to store outputs#
  par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
  plot(times, modelout[,"W"], type="l") #plot output variables#
  plot(times, modelout[,"D"], type="l")#
  plot(times, modelout[,"X"], type="l")#
  plot(times, modelout[,"G"], type="l")#
  plot(times, modelout[,"K"], type="l")#
  plot(times, modelout[,"P"], type="l")  #plot all the photsynthsis variables on one graph#
  lines(times, modelout[,"R"], type="l")#
  lines(times, modelout[,"B"], type="l")#
  lines(times, modelout[,"M"], type="l")#
  plot(times, modelout[,"S"], type="l")#
dev.off() #close the pdf#
#
par(mfrow=c(2,4)) #make a 2X4 grid of graphs#
plot(times, modelout[,"W"], type="l")#
plot(times, modelout[,"D"], type="l")#
plot(times, modelout[,"X"], type="l")#
plot(times, modelout[,"G"], type="l")#
plot(times, modelout[,"K"], type="l")#
plot(times, modelout[,"P"], type="l", col="green")#
lines(times, modelout[,"R"], type="l", col="red")#
lines(times, modelout[,"B"], type="l", col="black")#
lines(times, modelout[,"M"], type="l", col="blue")#
plot(times, modelout[,"S"], type="l")#
#
#par(mfrow=c(1,1))  #set up a single graph#
plot(modelout[,"X"], modelout[,"K"], type="l")  #plot xylem pressure against conductance
