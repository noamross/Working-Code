setwd('/Users/noamross/Dropbox/Workspace/_WorkingCode/OldStuff')
rm(list=ls()) #clear workspace
setwd('/Users/noamross/Dropbox/Workspace/_WorkingCode/OldStuff')
source("fit_ode.R") #load functions
setwd('/Users/noamross/Dropbox/Workspace/_WorkingCode/OldStuff')
#set parameters#
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("paramecium2.txt")) #load data
setwd('/Users/noamross/Dropbox/Workspace/_WorkingCode/OldStuff')
nTrue = as.matrix(read.table("./data/paramecium2.txt")) #load data
setwd('/Users/noamross/Dropbox/Workspace/_WorkingCode/OldStuff')
nTrue = as.matrix(read.table("../data/paramecium2.txt")) #load data
setwd('/Users/noamross/Dropbox/Workspace/_WorkingCode/OldStuff')
#run fitting function#
fit = fit_ode(LotVolt,parms,guesses,nTrue) #
#
#calculate some values for plotting#
times = 1:dim(nTrue)[1]   #times vector#
parms2 = numeric.list(replace.variables(fit$par, parms)) #create parameter list with fitted outputs#
nSim = lsoda(nTrue[1,],times,LotVolt,parms2) #solve the ODEs with fitted values#
#
#plots#
plot(times,nTrue[,1], main="Lotka-Volterra ODE Model fit to Data",xlab="time",ylab="Population")  #plot the real data#
points(times,nTrue[,2])#
lines(times,nSim[,2])	#add the model fit lines#
lines(times,nSim[,3])#
legend("topleft",c("Data","Model Fit"),lty=c("blank","solid"),pch=c(1,NA_integer_)) #create a legend#
text(3.3,300,bquote(alpha[21] == .(fit$par[1])))  #annotate with alpha values#
text(3.3,280,bquote(alpha[12] == .(fit$par[2])))
d :s df :s :d df _df Noam Ross#
Graduate Group in Ecology#
Department of Environmental Science and Policy#
University of California at Davis#
+1.646.244.0484#
http://www.noamross.net/#
twitter: @noamross
setwd('/Users/noamross/.Trash/Workdir')
r = c(0.7816, 0.6283)  #r and K are given
setwd('/Users/noamross/.Trash/Workdir')
r = c(0.7816, 0.6283)  #r and K are given
parms = list(r=r,K=K,alphas=alphas)  #bind into named list
nTrue = as.matrix(read.table("paramecium2.txt")) #load data
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses
nTrue = as.matrix(read.table("paramecium2.txt")) #load data
nTrue = as.matrix(read.table("paramecium2.txt")) #load data
nTrue = as.matrix(read.table("../data/paramecium2.txt")) #load data
nTrue = as.matrix(read.table(data/paramecium2.txt")) #load data
nTure
nTrue
rm(list=ls()) #clear workspace#
#
source("fit_ode.R") #load functions#
#
#
#set parameters#
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("paramecium2.txt")) #load data#
#
#run fitting function#
fit = fit_ode(LotVolt,parms,guesses,nTrue) #
#
#calculate some values for plotting#
times = 1:dim(nTrue)[1]   #times vector#
parms2 = numeric.list(replace.variables(fit$par, parms)) #create parameter list with fitted outputs#
nSim = lsoda(nTrue[1,],times,LotVolt,parms2) #solve the ODEs with fitted values#
#
#plots#
plot(times,nTrue[,1], main="Lotka-Volterra ODE Model fit to Data",xlab="time",ylab="Population")  #plot the real data#
points(times,nTrue[,2])#
lines(times,nSim[,2])	#add the model fit lines#
lines(times,nSim[,3])#
legend("topleft",c("Data","Model Fit"),lty=c("blank","solid"),pch=c(1,NA_integer_)) #create a legend#
text(3.3,300,bquote(alpha[21] == .(fit$par[1])))  #annotate with alpha values#
text(3.3,280,bquote(alpha[12] == .(fit$par[2])))
rm(list=ls()) #clear workspace#
#
source("fit_ode.R") #load functions#
#
#
#set parameters#
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("data/paramecium2.txt")) #load data#
#
#run fitting function#
fit = fit_ode(LotVolt,parms,guesses,nTrue) #
#
#calculate some values for plotting#
times = 1:dim(nTrue)[1]   #times vector#
parms2 = numeric.list(replace.variables(fit$par, parms)) #create parameter list with fitted outputs#
nSim = lsoda(nTrue[1,],times,LotVolt,parms2) #solve the ODEs with fitted values#
#
#plots#
plot(times,nTrue[,1], main="Lotka-Volterra ODE Model fit to Data",xlab="time",ylab="Population")  #plot the real data#
points(times,nTrue[,2])#
lines(times,nSim[,2])	#add the model fit lines#
lines(times,nSim[,3])#
legend("topleft",c("Data","Model Fit"),lty=c("blank","solid"),pch=c(1,NA_integer_)) #create a legend#
text(3.3,300,bquote(alpha[21] == .(fit$par[1])))  #annotate with alpha values#
text(3.3,280,bquote(alpha[12] == .(fit$par[2])))
rm(list=ls()) #clear workspace#
#
source("OldStuff/fit_ode.R") #load functions#
#
#
#set parameters#
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("data/paramecium2.txt")) #load data#
#
#run fitting function#
fit = fit_ode(LotVolt,parms,guesses,nTrue) #
#
#calculate some values for plotting#
times = 1:dim(nTrue)[1]   #times vector#
parms2 = numeric.list(replace.variables(fit$par, parms)) #create parameter list with fitted outputs#
nSim = lsoda(nTrue[1,],times,LotVolt,parms2) #solve the ODEs with fitted values#
#
#plots#
plot(times,nTrue[,1], main="Lotka-Volterra ODE Model fit to Data",xlab="time",ylab="Population")  #plot the real data#
points(times,nTrue[,2])#
lines(times,nSim[,2])	#add the model fit lines#
lines(times,nSim[,3])#
legend("topleft",c("Data","Model Fit"),lty=c("blank","solid"),pch=c(1,NA_integer_)) #create a legend#
text(3.3,300,bquote(alpha[21] == .(fit$par[1])))  #annotate with alpha values#
text(3.3,280,bquote(alpha[12] == .(fit$par[2])))
[1] 559.6860 202.4931
setwd('/Users/noamross/.Trash/Workdir')
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses
setwd('/Users/noamross/.Trash/Workdir')
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses
parms = list(r=r,K=K,alphas=alphas)  #bind into named list
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("data/paramecium2.txt")) #load data
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("data/paramecium2.txt")) #load data
source("OldStuff/fit_ode.R") #load functions
#set parameters
r = c(0.7816, 0.6283)  #r and K are given
K = c(559.686, 202.4931)
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns
rm(list=ls()) #clear workspace#
#
source("OldStuff/fit_ode.R") #load functions#
#
#
#set parameters#
r = c(0.7816, 0.6283)  #r and K are given#
K = c(559.686, 202.4931)#
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns#
parms = list(r=r,K=K,alphas=alphas)  #bind into named list#
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses#
nTrue = as.matrix(read.table("data/paramecium2.txt")) #load data#
#
#run fitting function#
fit = fit_ode(LotVolt,parms,guesses,nTrue) #
#
#calculate some values for plotting#
times = 1:dim(nTrue)[1]   #times vector#
parms2 = numeric.list(replace.variables(fit$par, parms)) #create parameter list with fitted outputs#
nSim = lsoda(nTrue[1,],times,LotVolt,parms2) #solve the ODEs with fitted values#
#
#plots#
plot(times,nTrue[,1], main="Lotka-Volterra ODE Model fit to Data",xlab="time",ylab="Population")  #plot the real data#
points(times,nTrue[,2])#
lines(times,nSim[,2])	#add the model fit lines#
lines(times,nSim[,3])#
legend("topleft",c("Data","Model Fit"),lty=c("blank","solid"),pch=c(1,NA_integer_)) #create a legend#
text(3.3,300,bquote(alpha[21] == .(fit$par[1])))  #annotate with alpha values#
text(3.3,280,bquote(alpha[12] == .(fit$par[2])))
alphas = rbind(c(1,"a21"),c("a12",1)) #create alpha matrix with unknowns
parms = list(r=r,K=K,alphas=alphas)  #bind into named list
guesses = c(a21=0.5, a12=0.5)	#create named vector of guesses
nTrue = as.matrix(read.table("data/paramecium2.txt")) #load data
#run fitting function
fit = fit_ode(LotVolt,parms,guesses,nTrue)
#calculate some values for plotting
times = 1:dim(nTrue)[1]   #times vector
parms2 = numeric.list(replace.variables(fit$par, parms)) #create parameter list with fitted outputs
nSim = lsoda(nTrue[1,],times,LotVolt,parms2) #solve the ODEs with fitted values
